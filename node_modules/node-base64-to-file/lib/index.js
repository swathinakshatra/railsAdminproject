"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var base64regex = /^data:([A-Za-z-+\/]+);base64,(.+)$/;
var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
var defaultFileOptions = { filePath: './uploads', types: ['jpg', 'jpeg', 'png'], randomizeFileNameLength: 10 };
var typesArrayToRegex = function (types) { return __awaiter(void 0, void 0, void 0, function () {
    var typesToString, regex;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Promise.all(types.map(function (type, index) { return (index === types.length - 1 ? "" + type : type + "|"); }))];
            case 1:
                typesToString = _a.sent();
                regex = new RegExp("/(?<=S+).(" + typesToString + ")/gi");
                return [2 /*return*/, regex];
        }
    });
}); };
var decodeBase64 = function (base64) { return __awaiter(void 0, void 0, void 0, function () {
    var matches;
    return __generator(this, function (_a) {
        matches = base64.match(base64regex);
        if (!matches || matches.length !== 3) {
            return [2 /*return*/, null];
        }
        return [2 /*return*/, { type: matches[1], buffer: Buffer.from(matches[2], 'base64') }];
    });
}); };
var fileTypeControl = function (base64Type, types) { return __awaiter(void 0, void 0, void 0, function () {
    var validateRegex;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (types.length === 0)
                    return [2 /*return*/, true];
                return [4 /*yield*/, typesArrayToRegex(types)];
            case 1:
                validateRegex = _a.sent();
                return [2 /*return*/, validateRegex.test(base64Type)];
        }
    });
}); };
var createRandomFileName = function (randomizeFileNameLength, fileExtention) { return __awaiter(void 0, void 0, void 0, function () {
    var result, charactersLength, i;
    return __generator(this, function (_a) {
        result = '';
        charactersLength = characters.length;
        for (i = 0; i < randomizeFileNameLength; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return [2 /*return*/, result + "." + fileExtention];
    });
}); };
var writeBase64ToDisk = function (base64Buffer, options) { return __awaiter(void 0, void 0, void 0, function () {
    var fileName, randomizeFileNameLength, fileExtention, filePath, _a, e_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                fileName = options.fileName;
                randomizeFileNameLength = options.randomizeFileNameLength, fileExtention = options.fileExtention, filePath = options.filePath;
                _b.label = 1;
            case 1:
                _b.trys.push([1, 7, , 8]);
                if (!fileName) return [3 /*break*/, 2];
                _a = fileName + "." + fileExtention;
                return [3 /*break*/, 4];
            case 2: return [4 /*yield*/, createRandomFileName(randomizeFileNameLength, fileExtention)];
            case 3:
                _a = _b.sent();
                _b.label = 4;
            case 4:
                fileName = _a;
                if (!fs.statSync(path.resolve(filePath)).isDirectory()) return [3 /*break*/, 6];
                return [4 /*yield*/, fs.promises.writeFile(path.resolve(filePath, fileName), base64Buffer, { encoding: 'base64' })];
            case 5:
                _b.sent();
                return [2 /*return*/, { status: true, data: fileName, message: 'File created.' }];
            case 6: return [2 /*return*/, { status: false, data: null, message: 'No such file or directory' }];
            case 7:
                e_1 = _b.sent();
                if (e_1.code === 'ENOENT') {
                    return [2 /*return*/, { status: false, data: null, message: 'No such file or directory' }];
                }
                else {
                    return [2 /*return*/, { status: false, data: null, message: e_1.message }];
                }
                return [3 /*break*/, 8];
            case 8: return [2 /*return*/];
        }
    });
}); };
function base64toFile(base64, options) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                    var decodedBase64, createdFile, e_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 3, , 4]);
                                options = Object.assign({}, defaultFileOptions, options);
                                return [4 /*yield*/, decodeBase64(base64)];
                            case 1:
                                decodedBase64 = _a.sent();
                                if (!decodedBase64) {
                                    return [2 /*return*/, reject(new Error('Invalid base64 string!'))];
                                }
                                if (options.fileMaxSize && decodedBase64.buffer.toString().length > options.fileMaxSize) {
                                    return [2 /*return*/, reject(new Error('File too large!'))];
                                }
                                if (options.types && !fileTypeControl(decodedBase64.type, options.types)) {
                                    return [2 /*return*/, reject(new Error('Invalid file type!'))];
                                }
                                return [4 /*yield*/, writeBase64ToDisk(decodedBase64.buffer, __assign(__assign({}, options), { fileExtention: decodedBase64.type.split('/')[1] }))];
                            case 2:
                                createdFile = _a.sent();
                                if (createdFile.status) {
                                    return [2 /*return*/, resolve(createdFile.data)];
                                }
                                else {
                                    return [2 /*return*/, reject(new Error(createdFile.message))];
                                }
                                return [3 /*break*/, 4];
                            case 3:
                                e_2 = _a.sent();
                                return [2 /*return*/, reject(new Error(e_2.message))];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
exports.default = base64toFile;
// For CommonJS default export support
module.exports = base64toFile;
module.exports.default = base64toFile;
